<!--&lt;!&ndash;-->
<!--  ~ Licensed to the Apache Software Foundation (ASF) under one or more-->
<!--  ~ contributor license agreements.  See the NOTICE file distributed with-->
<!--  ~ this work for additional information regarding copyright ownership.-->
<!--  ~ The ASF licenses this file to You under the Apache License, Version 2.0-->
<!--  ~ (the "License"); you may not use this file except in compliance with-->
<!--  ~ the License.  You may obtain a copy of the License at-->
<!--  ~-->
<!--  ~    http://www.apache.org/licenses/LICENSE-2.0-->
<!--  ~-->
<!--  ~ Unless required by applicable law or agreed to in writing, software-->
<!--  ~ distributed under the License is distributed on an "AS IS" BASIS,-->
<!--  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.-->
<!--  ~ See the License for the specific language governing permissions and-->
<!--  ~ limitations under the License.-->
<!--  &ndash;&gt;-->
<!--&lt;!&ndash;-->

<!--If you wish to turn off checking for a section of code, you can put a comment in the source-->
<!--before and after the section, with the following syntax:-->

<!--  // scalastyle:off-->
<!--  ...  // stuff that breaks the styles-->
<!--  // scalastyle:on-->

<!--You can also disable only one rule, by specifying its rule id, as specified in:-->
<!--  http://www.scalastyle.org/rules-0.7.0.html-->

<!--  // scalastyle:off no.finalize-->
<!--  override def finalize(): Unit = ...-->
<!--  // scalastyle:on no.finalize-->

<!--This file is divided into 3 sections:-->
<!-- (1) rules that we enforce.-->
<!-- (2) rules that we would like to enforce, but haven't cleaned up the codebase to turn on yet-->
<!--     (or we need to make the scalastyle rule more configurable).-->
<!-- (3) rules that we don't want to enforce.-->
<!--&ndash;&gt;-->

<!--<scalastyle>-->
<!--    <name>Scalastyle standard configuration</name>-->

<!--    &lt;!&ndash; ================================================================================ &ndash;&gt;-->
<!--    &lt;!&ndash;                               rules we enforce                                   &ndash;&gt;-->
<!--    &lt;!&ndash; ================================================================================ &ndash;&gt;-->

<!--    <check level="warn" class="org.scalastyle.file.FileTabChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.file.HeaderMatchesChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="header"><![CDATA[/*-->
<!--* Copyright 2015 eleflow.com.br.-->
<!--*-->
<!--* Licensed under the Apache License, Version 2.0 (the "License");-->
<!--* you may not use this file except in compliance with the License.-->
<!--* You may obtain a copy of the License at-->
<!--*-->
<!--* http://www.apache.org/licenses/LICENSE-2.0-->
<!--*-->
<!--* Unless required by applicable law or agreed to in writing, software-->
<!--* distributed under the License is distributed on an "AS IS" BASIS,-->
<!--* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.-->
<!--* See the License for the specific language governing permissions and-->
<!--* limitations under the License.-->
<!--*/]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">-->
<!--        <parameters>-->
<!--&lt;!&ndash;            <parameter name="maxLineLength"><![CDATA[100]]></parameter>&ndash;&gt;-->
<!--            <parameter name="tabSize"><![CDATA[2]]></parameter>-->
<!--            <parameter name="ignoreImports">true</parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="maxParameters"><![CDATA[15]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>-->
<!--            <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"></check>-->

<!--    <check customId="nonascii" level="warn" class="org.scalastyle.scalariform.NonASCIICharacterChecker"-->
<!--           enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="false"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="tokens">ARROW, EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY,-->
<!--                LARROW, RARROW-->
<!--            </parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    &lt;!&ndash; ??? usually shouldn't be checked into the code base. &ndash;&gt;-->
<!--    <check level="warn" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"></check>-->

<!--    &lt;!&ndash; As of SPARK-7558, all tests in Spark should extend o.a.s.SparkFunSuite instead of FunSuite directly &ndash;&gt;-->
<!--    <check customId="funsuite" level="warn" class="org.scalastyle.scalariform.TokenChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">^FunSuite[A-Za-z]*$</parameter>-->
<!--        </parameters>-->
<!--        <customMessage>Tests must extend org.apache.spark.SparkFunSuite instead.</customMessage>-->
<!--    </check>-->

<!--    &lt;!&ndash; As of SPARK-7977 all printlns need to be wrapped in '// scalastyle:off/on println' &ndash;&gt;-->
<!--    <check customId="println" level="warn" class="org.scalastyle.scalariform.TokenChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">^println$</parameter>-->
<!--        </parameters>-->
<!--        <customMessage><![CDATA[Are you sure you want to println? If yes, wrap the code block with-->
<!--      // scalastyle:off println-->
<!--      println(...)-->
<!--      // scalastyle:on println]]></customMessage>-->
<!--    </check>-->

<!--    &lt;!&ndash;<check customId="visiblefortesting" level="warn" class="org.scalastyle.file.RegexChecker" enabled="true">-->
<!--     <parameters><parameter name="regex">@VisibleForTesting</parameter></parameters>-->
<!--     <customMessage><![CDATA[-->
<!--       @VisibleForTesting causes classpath issues. Please note this in the java doc instead (SPARK-11615).-->
<!--     ]]></customMessage>-->
<!--   </check>&ndash;&gt;-->

<!--    <check customId="runtimeaddshutdownhook" level="warn" class="org.scalastyle.file.RegexChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">Runtime\.getRuntime\.addShutdownHook</parameter>-->
<!--        </parameters>-->
<!--        <customMessage><![CDATA[-->
<!--      Are you sure that you want to use Runtime.getRuntime.addShutdownHook? In most cases, you should use-->
<!--      ShutdownHookManager.addShutdownHook instead.-->
<!--      If you must use Runtime.getRuntime.addShutdownHook, wrap the code block with-->
<!--      // scalastyle:off runtimeaddshutdownhook-->
<!--      Runtime.getRuntime.addShutdownHook(...)-->
<!--      // scalastyle:on runtimeaddshutdownhook-->
<!--    ]]></customMessage>-->
<!--    </check>-->

<!--    <check customId="mutablesynchronizedbuffer" level="warn" class="org.scalastyle.file.RegexChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">mutable\.SynchronizedBuffer</parameter>-->
<!--        </parameters>-->
<!--        <customMessage><![CDATA[-->
<!--      Are you sure that you want to use mutable.SynchronizedBuffer? In most cases, you should use-->
<!--      java.util.concurrent.ConcurrentLinkedQueue instead.-->
<!--      If you must use mutable.SynchronizedBuffer, wrap the code block with-->
<!--      // scalastyle:off mutablesynchronizedbuffer-->
<!--      mutable.SynchronizedBuffer[...]-->
<!--      // scalastyle:on mutablesynchronizedbuffer-->
<!--    ]]></customMessage>-->
<!--    </check>-->

<!--    <check customId="classforname" level="warn" class="org.scalastyle.file.RegexChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">Class\.forName</parameter>-->
<!--        </parameters>-->
<!--        <customMessage><![CDATA[-->
<!--      Are you sure that you want to use Class.forName? In most cases, you should use Utils.classForName instead.-->
<!--      If you must use Class.forName, wrap the code block with-->
<!--      // scalastyle:off classforname-->
<!--      Class.forName(...)-->
<!--      // scalastyle:on classforname-->
<!--    ]]></customMessage>-->
<!--    </check>-->

<!--    <check customId="awaitresult" level="warn" class="org.scalastyle.file.RegexChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">Await\.result</parameter>-->
<!--        </parameters>-->
<!--        <customMessage><![CDATA[-->
<!--      Are you sure that you want to use Await.result? In most cases, you should use ThreadUtils.awaitResult instead.-->
<!--      If you must use Await.result, wrap the code block with-->
<!--      // scalastyle:off awaitresult-->
<!--      Await.result(...)-->
<!--      // scalastyle:on awaitresult-->
<!--    ]]></customMessage>-->
<!--    </check>-->

<!--    &lt;!&ndash; As of SPARK-9613 JavaConversions should be replaced with JavaConverters &ndash;&gt;-->
<!--    <check customId="javaconversions" level="warn" class="org.scalastyle.scalariform.TokenChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">JavaConversions</parameter>-->
<!--        </parameters>-->
<!--        <customMessage>Instead of importing implicits in scala.collection.JavaConversions._, import-->
<!--            scala.collection.JavaConverters._ and use .asScala / .asJava methods-->
<!--        </customMessage>-->
<!--    </check>-->

<!--    <check customId="commonslang2" level="warn" class="org.scalastyle.scalariform.TokenChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">org\.apache\.commons\.lang\.</parameter>-->
<!--        </parameters>-->
<!--        <customMessage>Use Commons Lang 3 classes (package org.apache.commons.lang3.*) instead-->
<!--            of Commons Lang 2 (package org.apache.commons.lang.*)-->
<!--        </customMessage>-->
<!--    </check>-->

<!--    &lt;!&ndash;<check level="warn" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="false">&ndash;&gt;-->
<!--        &lt;!&ndash;<parameters>&ndash;&gt;-->
<!--            &lt;!&ndash;<parameter name="groups">java,scala,3rdParty,spark</parameter>&ndash;&gt;-->
<!--            &lt;!&ndash;<parameter name="group.java">javax?\..*</parameter>&ndash;&gt;-->
<!--            &lt;!&ndash;<parameter name="group.scala">scala\..*</parameter>&ndash;&gt;-->
<!--            &lt;!&ndash;<parameter name="group.3rdParty">(?!org\.apache\.spark\.).*</parameter>&ndash;&gt;-->
<!--            &lt;!&ndash;<parameter name="group.spark">org\.apache\.spark\..*</parameter>&ndash;&gt;-->
<!--        &lt;!&ndash;</parameters>&ndash;&gt;-->
<!--    &lt;!&ndash;</check>&ndash;&gt;-->

<!--    &lt;!&ndash; check level="warn" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">-->
<!--      <parameters>-->
<!--        <parameter name="tokens">COMMA</parameter>-->
<!--      </parameters>-->
<!--    </check> &ndash;&gt;-->

<!--    &lt;!&ndash; SPARK-3854: Single Space between ')' and '{' &ndash;&gt;-->
<!--    <check customId="SingleSpaceBetweenRParenAndLCurlyBrace" level="warn" class="org.scalastyle.file.RegexChecker"-->
<!--           enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">\)\{</parameter>-->
<!--        </parameters>-->
<!--        <customMessage><![CDATA[-->
<!--      Single Space between ')' and `{`.-->
<!--    ]]></customMessage>-->
<!--    </check>-->

<!--    <check customId="NoScalaDoc" level="warn" class="org.scalastyle.file.RegexChecker" enabled="false">-->
<!--        <parameters>-->
<!--            <parameter name="regex">(?m)^(\s*)\/[*][*].*$(\r|)\n^\\[*]</parameter>-->
<!--            &lt;!&ndash;<parameter name="regex">^.[\w]*\n\/\*\*\n(  \* [\w]+\n)* \*\/\n[\w]*</parameter>&ndash;&gt;-->
<!--        </parameters>-->
<!--        <customMessage>Use Javadoc style indentation for multiline comments</customMessage>-->
<!--    </check>-->

<!--    <check customId="OmitBracesInCase" level="warn" class="org.scalastyle.file.RegexChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">case[^\n>]*=>\s*\{</parameter>-->
<!--        </parameters>-->
<!--        <customMessage>Omit braces in case clauses.</customMessage>-->
<!--    </check>-->

<!--    &lt;!&ndash; SPARK-16877: Avoid Java annotations &ndash;&gt;-->
<!--    <check customId="OverrideJavaCase" level="warn" class="org.scalastyle.scalariform.TokenChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex">^Override$</parameter>-->
<!--        </parameters>-->
<!--        <customMessage>override modifier should be used instead of @java.lang.Override.</customMessage>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"></check>-->

<!--    &lt;!&ndash; ================================================================================ &ndash;&gt;-->
<!--    &lt;!&ndash;       rules we'd like to enforce, but haven't cleaned up the codebase yet        &ndash;&gt;-->
<!--    &lt;!&ndash; ================================================================================ &ndash;&gt;-->

<!--    &lt;!&ndash; We cannot turn the following two on, because it'd fail a lot of string interpolation use cases. &ndash;&gt;-->
<!--    &lt;!&ndash; Ideally the following two rules should be configurable to rule out string interpolation. &ndash;&gt;-->
<!--    &lt;!&ndash;<check level="warn" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="false"></check>-->
<!--    <check level="warn" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="false"></check>&ndash;&gt;-->

<!--    &lt;!&ndash; This breaks symbolic method names so we don't turn it on. &ndash;&gt;-->
<!--    &lt;!&ndash; Maybe we should update it to allow basic symbolic names, and then we are good to go. &ndash;&gt;-->
<!--    &lt;!&ndash; <check level="warn" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="false">-->
<!--       <parameters>-->
<!--       <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>-->
<!--       </parameters>-->
<!--     </check>&ndash;&gt;-->

<!--    &lt;!&ndash; Should turn this on, but we have a few places that need to be fixed first &ndash;&gt;-->
<!--    <check level="warn" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"></check>-->

<!--    &lt;!&ndash; ================================================================================ &ndash;&gt;-->
<!--    &lt;!&ndash;                               rules we don't want                                &ndash;&gt;-->
<!--    &lt;!&ndash; ================================================================================ &ndash;&gt;-->

<!--    &lt;!&ndash;<check level="warn" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="false">-->
<!--      <parameters><parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter></parameters>-->
<!--    </check>&ndash;&gt;-->

<!--    &lt;!&ndash; We want the opposite of this: NewLineAtEofChecker &ndash;&gt;-->
<!--    <check level="warn" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"></check>-->

<!--    &lt;!&ndash; This one complains about all kinds of random things. Disable. &ndash;&gt;-->
<!--    &lt;!&ndash;  <check level="warn" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="false"></check>&ndash;&gt;-->

<!--    &lt;!&ndash; We use return quite a bit for control flows and guards &ndash;&gt;-->
<!--    &lt;!&ndash;<check level="warn" class="org.scalastyle.scalariform.ReturnChecker" enabled="false"></check>&ndash;&gt;-->

<!--    &lt;!&ndash; We use null a lot in low level code and to interface with 3rd party code &ndash;&gt;-->
<!--    &lt;!&ndash;<check level="warn" class="org.scalastyle.scalariform.NullChecker" enabled="false"></check>&ndash;&gt;-->

<!--    &lt;!&ndash; Doesn't seem super big deal here ... &ndash;&gt;-->
<!--    &lt;!&ndash;<check level="warn" class="org.scalastyle.scalariform.NoCloneChecker" enabled="false"></check> &ndash;&gt;-->

<!--    &lt;!&ndash; Doesn't seem super big deal here ...-->
<!--    <check level="warn" class="org.scalastyle.file.FileLengthChecker" enabled="false">-->
<!--      <parameters><parameter name="maxFileLength">800></parameter></parameters>-->
<!--    </check>-->
<!--      &ndash;&gt;-->

<!--    &lt;!&ndash; Doesn't seem super big deal here ...-->
<!--    <check level="warn" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="false">-->
<!--      <parameters><parameter name="maxTypes">30</parameter></parameters>-->
<!--</check>&ndash;&gt;-->

<!--    &lt;!&ndash; Doesn't seem super big deal here ... &ndash;&gt;-->
<!--    &lt;!&ndash;<check level="warn" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="false">-->
<!--      <parameters><parameter name="maximum">10</parameter></parameters>-->
<!--    </check>&ndash;&gt;-->

<!--    &lt;!&ndash; Doesn't seem super big deal here ... &ndash;&gt;-->
<!--    &lt;!&ndash;  <check level="warn" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="false">-->
<!--        <parameters><parameter name="maxLength">50</parameter></parameters>-->
<!--      </check>&ndash;&gt;-->

<!--    &lt;!&ndash; Not exactly feasible to enforce this right now. &ndash;&gt;-->
<!--    &lt;!&ndash; It is also infrequent that somebody introduces a new class with a lot of methods. &ndash;&gt;-->
<!--    &lt;!&ndash;<check level="warn" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="false">-->
<!--      <parameters><parameter name="maxMethods"><![CDATA[30]]></parameter></parameters>-->
<!--    </check>&ndash;&gt;-->

<!--    &lt;!&ndash; Doesn't seem super big deal here, and we have a lot of magic numbers ...-->
<!--    <check level="warn" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false">-->
<!--      <parameters><parameter name="ignore">-1,0,1,2,3</parameter></parameters>-->
<!--    </check>&ndash;&gt;-->

<!--    <check level="warn" class="org.scalastyle.file.FileLengthChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="maxFileLength"><![CDATA[800]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->
<!--    <check level="warn" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker"-->
<!--           enabled="true"></check>-->
<!--    <check level="warn" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker"-->
<!--           enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.NullChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.file.RegexChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex"><![CDATA[println]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="maxTypes"><![CDATA[30]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="maximum"><![CDATA[10]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"></check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="maxLength"><![CDATA[50]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check level="warn" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">-->
<!--        <parameters>-->
<!--            <parameter name="maxMethods"><![CDATA[30]]></parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    &lt;!&ndash;<check enabled="true" class="org.scalastyle.file.IndentationChecker" level="warning">&ndash;&gt;-->
<!--        &lt;!&ndash;<parameters>&ndash;&gt;-->
<!--            &lt;!&ndash;<parameter name="tabSize">2</parameter>&ndash;&gt;-->
<!--            &lt;!&ndash;<parameter name="methodParamIndentSize">2</parameter>&ndash;&gt;-->
<!--            &lt;!&ndash;<parameter name="classParamIndentSize">4</parameter>&ndash;&gt;-->
<!--        &lt;!&ndash;</parameters>&ndash;&gt;-->
<!--    &lt;!&ndash;</check>&ndash;&gt;-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.BlockImportChecker" level="warn"/>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.ClassTypeParameterChecker" level="warn">-->
<!--        <parameters>-->
<!--            <parameter name="regex">^[A-Z_]$</parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check enabled="false" class="org.scalastyle.scalariform.DisallowSpaceAfterTokenChecker" level="warn">-->
<!--        <parameters>-->
<!--            <parameter name="tokens">LPAREN</parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check enabled="false" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" level="warn">-->
<!--        <parameters>-->
<!--            <parameter name="tokens">COLON, COMMA, RPAREN</parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.EmptyClassChecker" level="warn"/>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.ImportGroupingChecker" level="warn"/>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" level="warn">-->
<!--        <parameters>-->
<!--            <parameter name="allowed">1</parameter>-->
<!--            <parameter name="ignoreRegex">^\&quot;\&quot;$</parameter>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check enabled="false" class="org.scalastyle.scalariform.PatternMatchAlignChecker" level="warn"/>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.ProcedureDeclarationChecker" level="warn"/>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.RedundantIfChecker" level="warn"/>-->

<!--    <check enabled="false" class="org.scalastyle.scalariform.TodoCommentChecker" level="warn">-->
<!--        <parameters>-->
<!--            <parameter default="TODO|FIXME" type="string" name="words"/>-->
<!--        </parameters>-->
<!--    </check>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.TokenChecker" level="warn">-->
<!--        <parameters>-->
<!--            <parameter name="regex">^[ai]sInstanceOf$</parameter>-->
<!--        </parameters>-->
<!--        <customMessage>Avoid casting.</customMessage>-->
<!--    </check>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.UnderscoreImportChecker" level="warn"/>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.VarFieldChecker" level="warn"/>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.VarLocalChecker" level="warn"/>-->

<!--    <check enabled="true" class="org.scalastyle.scalariform.XmlLiteralChecker" level="warn"/>-->
<!--</scalastyle>-->
